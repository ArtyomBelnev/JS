ПЛАН 8-ГО УРОКА:
Установка контекста this через методы bind, call/apply:
  - Контекст this - http://web.archive.org/web/20190405104502/http://learn.javascript.ru/object-methods (до главы
    "Ссылочный тип")
  - Метод bind - см. скрины
  - Методы call/apply - см. скрины
  - Разница между bind и call/apply:
    Bind - только устанавливает контекст и передает параметры, но не вызывает функцию к работе
    Call - устанавливает контекст, передает параметры раздельно и вызывает функцию
    Apply - устанавливает контекст, передает параметры в виде массива и вызывает функцию, в функции параметры
    принимаются по-прежнему как раздельные
  - Чем будет являться this в конкретном случае - см. скрин

Что такое класс и объект класса:
  - Класс и объект класса, свойства и методы
  - Описание собственного класса и объекта класса:
    - См. скрин
    - Функция-конструктор - фабрика по производству объектов, иначе говоря шаблон
    - Что запишется в объект
    - В this записывается текущий объект класса
    - Фиксированные свойства "хардкодятся", динамические чаще всего получают из параметров функции-конструктора
    - Удаление объектов класса - нет прямого способа, присваивается null
    - Слайд B.60c - последовательность действий
  - Сравнение простого объекта и объекта класса - см. скрины

  Практическое задание 1:
    Создать класс Cat. Добавить ему свойство - name, которое будем получать при создании объекта класса, и пока пустой
    метод feed. Создать объект класса Cat, вывести в консоль его имя и затем удалить объект.
    (Разобрать правила форматирования).

Три принципа ООП:
  - Инкапсуляция:
    Это процесс сокрытия части реализации интерфейса от пользователя.
    Например, мы не знаем, как устроен чайник изнутри, но тем не менее имеем простой интерфейс для работы с ним.
  - Наследование (нарисовать схему):
    Это возможность наследовать свойства и методы других классов.
    Например, у всех объектов класса "Животные" (супер-класс) есть свойство "количество лап" и метод "покормить животное".
    Класс "Кошки", в свою очередь, может отнаследовать данные свойство и метод, т.к. они присущи и кошкам (при
    наследовании также можно расширять и дополнять метод родителя).
    В то же время у объектов класса "Кошки" могут быть и свои специфичные свойства и методы, например "длина шерсти" и
    "погладить животное".
  - Полиморфизм (нарисовать схему):
    Это многообразие форм объекта, передаваемого в метод.
    Например, мы можем вызвать метод "покормить животное". В зависимости от того, какое животное мы туда передадим -
    способ кормления и корм может быть разным, но процесс кормления пройдет успешно, т.к. любое животное, отнаследованное
    от класса "Животные" можно кормить (у любого животного будет такой метод).

  - "Утиная" типизация (нарисовать схему) - если мы передадим в метод "покормить животное" простой объект "Ребенок" -
    процесс кормления также пройдет успешно, поскольку к любому ребенку также можно применить такой метод, даже несмотря
    на то, что ребенок - это не животное. Принцип "утиной" типизации звучит примерно так - "если это выглядит как утка,
    ходит как утка и крякает как утка - значит для нас это утка, и неважно что это на самом деле".

Функциональный стиль программирования:
  - Публичные и приватные свойства и методы, сохранение контекста - https://learn.javascript.ru/internal-external-interface

  Практическое задание 2:
    Добавить в класс Cat приватное свойство foodAmount, равное 50, и приватный метод formatFoodAmount, который
    будет возвращать это свойство + слово 'гр.'. В методе feed необходимо выводить в консоль информацию вида:
      "Насыпаем в миску (количество гр.) корма."
    "Количество гр." получаем с помощью метода formatFoodAmount.
    Вывести в консоль результат выполнения метода feed.